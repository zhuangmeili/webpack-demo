////////////////////////////////////////////////////////////////////////////////////
webpack基础配置
1、package.json
    private:true,  //我们确保安装包是私有的
    "main":"index.js", //去掉

2、创建bundle 文件
    webpack-demo
    |— dist
        |— index.html
    |- src   //源文件
        |- index.js
    |— webpack.config.js
    |— server.js //定义一个server服务器

    说明：
    dist “分发”代码是构建过程产生的代码最小化和优化后的“输出”目录，最终将在浏览器中加载：
    输入命令 会输出main.js
    $ npx webpack

3、使用ES6特性，请确保你在webpack的loader系统中使用 Babel的转译器

4、使用一个配置文件webpack.config.js(这时候可以把 webpack-cli依赖去掉了)
    可以取代webpack-cli方式的配置文件
    如果webpack.config.js存在，则webpack默认选择使用它
    如下，我们使用 --config选项只是表明，可以传递任何名称的配置文件
    对于拆分成多个文件的复杂配置非常游泳；
    $ npx webpack --config webpack.config.js
5、npm脚本（npm scripts）
    考虑到webpack-cli这种方式来运行本地的webpack不是特别方便，，我们可以在
    package.json中设置一个快捷方式
    "scripts":{
        "build":"webpack"
    }

    如上配置好之后，可以水用
    $ npm run build命令，来替代 npx 命令了

////////////////////////////////////////////////////////////////////////////////////
webpack 资源管理
1、加载css
    安装 style-loader  css-loader

    webpack.config.js 的module配置
    module:{
        rules:[
            {
                test:/\.css$/,
                use:['style-loader','css-loader']
            }
        ]
    }

2、ele元素的classList 属性
    var ele=document.createElement('div');
    ele.classList.add('cur');
    classList  返回元素的类名
    可以通过 add(), remove()方法修改它

3、加载图片
    安装 url-loader

    webpack .config.js 的module配置如下,增加一条rule
    module:{
        rules:[
            {
                test:/\.(jpg|jpeg|png|gif|svg)$/,
                use:['url-loader']
            }
        ]
    }

    拓展  如果想压缩优化图片，可以使用
    image-webpack-loader  //压缩图片
    url-loader
    设置url-loader limit  1000，，则icon大小小于1KB的话，会使用base64形式

////////////////////////////////////////////////////////////////////////////////////
管理输出
1、webpack.config.js
    entry: "./src/main.js",
    改为
    entry: {
        app: './src/index.js',
        print: './src/print.js'
    },


    filename: 'bundle.js',
    改为
    filename: '[name].bundle.js',

2、安装插件
    html-webpack-plugin
    这个插件
    会默认生成 index.html,会生成新的把原来的替换掉，所有的bundle都会自动添加到html中


3、清理/dist 文件夹
    通常，在每次构建前清理 /dist 文件夹，是比较推荐的做法，因此只会生成用到的文件。让我们完成这个需求。
    clean-webpack-plugin
////////////////////////////////////////////////////////////////////////////////////
开发环境
1、使用source map
    webpack打包源文件，可能很难追踪到错误和警告在源代码的位置

    为了更容易追踪错误和警告，js提供了 sourcemap功能
    webpack.config.js 配置如下
    devtool: "inline-source-map",

2、使用观察模式
    如果一个文件被更新，代码将会被重新编译
    package.json
     scripts:{
        "watch":"webpack --watch"
     }

     npm run watch

     //会自动编译修改后的模块，唯一的缺点是，为了看到修改后的实际效果，需要刷新浏览器！！！
     为了能够自动刷新浏览器，，引入 webpack-dev-server
3、webpack-dev-server
    实现实时重新加载 （live reloading）
    npm install --save-dev webpack-dev-server

    修改配置文件，告诉开发服务器(dev server)，在哪里查找文件：
    webpack.config.js
    devServer: {
        contentBase:'./dist'
    },

    package.json
    "scripts":{
        "start": "webpack-dev-server --open",
    }

    $ npm start //执行命令 浏览器自动加载页面。如果现在修改和保存任意源文件，web 服务器就会自动重新加载编译后的代码

4、webpack-dev-middleware
    可以吧webpack处理后的文件传递给一个服务器
    安装 express  webpack-dev-middleware

    webpack.config.js
    需要配置
    output:{
        publicPath: '/'
    }
    以确保文件资源，能在 http://localhost:8006  下正确访问

    创建一个server.js 建立一个express服务器
    package.json
    scripts:{
        "server":"node server.js",
    }

    $ npm run server

    打开浏览器，跳转到 http://localhost:8006，你应该看到你的webpack 应用程序已经运行！





////////////////////////////////////////////////////////////////////////////////////
开发环境 VS生产环境

production环境使用source-map
UglifyJSPlugin 是代码压缩方面比较好的选择



////////////////////////////////////////////////////////////////////////////////////

